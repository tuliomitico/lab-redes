node n1 {
    type router
    model PC
    network-config {
	hostname n1Client
	!
	interface eth0
	 ip address 10.0.0.2/24
	 ipv6 address 2001:db8:0:c1::2/64
	!
    }
    canvas c1
    iconcoords {29.0 250.0}
    labelcoords {29.0 282.0}
    services {DefaultRoute}
    interface-peer {eth0 n2}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3ISP
	!
	interface eth1
	 ipv6 address 2001:db8:0:a::1/64
	!
	interface eth0
	 ipv6 address 2001:db8:0:1000::2/64
	!
    }
    canvas c1
    iconcoords {366.0 226.0}
    labelcoords {367.0 266.0}
    interface-peer {eth0 n4}
    services {zebra IPForward DefaultRoute StaticRoute}
    interface-peer {eth1 n2}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh', )
	80
	('sh defaultroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	
	('staticroute.sh', )
	80
	('sh staticroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 3ffe:4::/64 via 2001:db8:0:1000::1
	
	
	
	/sbin/ip route add 2001:db8:0:c1::/64 via 2001:db8:0:a::2
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 2001:db8:0:1000::1
	
	
	}
    }
}

node n4 {
    type router
    model host
    network-config {
	hostname n4AFTR
	!
	interface eth1
	 ipv6 address 2001:db8:0:1000::1/64
	!
	interface eth0
	 ip address 203.0.113.130/25
	 ipv6 address 2001:db8:a::2/64
	!
    }
    canvas c1
    iconcoords {528.0 165.0}
    labelcoords {529.0 139.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('aftr.conf', 'aftr-script', )
	cmdup=('chmod +x aftr-script', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:aftr-script
	custom-command aftr-script
	config {
	#!/bin/sh
	
	aftr_start() {
	    set -x
	    ip link set tun0 up
	    ip addr add 192.0.0.1 peer 192.0.0.2 dev tun0
	    ip route add 203.0.113.131/32 dev tun0
	    ip -6 addr add fe80::1 dev tun0
	    ip -6 route add 2001:db8:0:2000::/64 dev tun0
	    arp -i eth0 -s 203.0.113.131 0a:0b:0c:0d:0e:f0 pub
	}
	
	aftr_stop() {
	    set -x
	    ip link set tun0 down
	}
	
	case "$1" in
	start)
		aftr_start
		;;
	stop)
		aftr_stop
		;;
	*)
		echo "Usage: $0 start|stop"
		exit 1
		;;
	esac
	
	exit 0
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:aftr.conf
	custom-command aftr.conf
	config {
	default tunnel mss on
	defmtu 1450
	address endpoint 2001:db8:0:2000::
	address icmp 203.0.113.131
	pool 203.0.113.131 
	acl6 ::0/0
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh', )
	80
	('sh defaultroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	
	('staticroute.sh', )
	80
	('sh staticroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 203.0.113.129
	#/sbin/ip route add 3ffe:4::/64 via 2001:db8:a::1
	
	/sbin/ip route add 2001:db8::/56 via 2001:db8:0:1000::2
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 203.0.113.129
	ip route add default via 2001:db8:a::1
	
	
	}
    }
    services {IPForward DefaultRoute StaticRoute UserDefined}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5BR
	!
	interface eth0
	 ip address 203.0.113.1/25
	 ipv6 address 2012::1/64
	!
	interface eth1
	 ip address 203.0.113.129/25
	 ipv6 address 2001:db8:a::1/64
	!
    }
    canvas c1
    iconcoords {712.0 246.0}
    labelcoords {712.0 274.0}
    interface-peer {eth0 n6}
    interface-peer {eth1 n4}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	
	('staticroute.sh', )
	80
	('sh staticroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 203.0.113.1
	#/sbin/ip route add 3ffe:4::/64 via 2012::1
	#/sbin/ip route add 10.9.8.0/24 via 203.0.113.129
	
	
	/sbin/ip route add 2001:db8::/48 via 2001:db8:a::2
	
	}
    }
    services {IPForward StaticRoute}
}

node n6 {
    type router
    model host
    network-config {
	hostname n6Host
	!
	interface eth0
	 ipv6 address 2012::2/64
	 ip address 203.0.113.2/25
	!
    }
    canvas c1
    iconcoords {790.0 141.0}
    labelcoords {793.0 122.0}
    interface-peer {eth0 n5}
    services {DefaultRoute}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2CPE
	!
	interface eth1
	 ipv6 address 2001:db8:0:a::2/64
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:db8:0:c1::1/64
	!
    }
    canvas c1
    iconcoords {153.0 164.0}
    labelcoords {153.0 138.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    services {zebra vtysh IPForward DefaultRoute}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh', )
	80
	('sh defaultroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 2001:db8:0:a::1
	
	}
    }
}

link l1 {
    nodes {n5 n6}
    bandwidth 0
}

link l2 {
    nodes {n5 n4}
    bandwidth 0
}

link l3 {
    nodes {n4 n3}
    bandwidth 0
}

link l4 {
    nodes {n1 n2}
    bandwidth 0
}

link l5 {
    nodes {n2 n3}
    bandwidth 0
}

annotation a1 {
    iconcoords {72.0 61.0 244.0 290.0}
    type rectangle
    label {CPE}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fba030
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {266.0 27.0 577.0 313.0}
    type rectangle
    label {ISP}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #11d046
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {288.0 71.0 477.0 290.0}
    type rectangle
    label {Access Network - v6 only}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #f6e3a4
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {502.0 72.0 558.0 289.0}
    type rectangle
    label {AFTR}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #1b84ff
    width 0
    border black
    rad 21
    canvas c1
}

annotation a5 {
    iconcoords {598 72 844 297}
    type rectangle
    label {Internet}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}

