node n1 {
    type router
    model host
    network-config {
	hostname n1Host
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {289.0 291.0}
    labelcoords {289.0 323.0}
    services {UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/run/rdnssd', '/var/run/resolvconf', )
	cmdup=('ln -s /var/run/rdnssd/resolv.conf /var/run/resolvconf/resolv.conf', )
	}
    }
    interface-peer {eth0 n2}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2Router
	!
	interface eth0
	 ipv6 address 2001:db8:1::1/64
	!
    }
    canvas c1
    iconcoords {289.0 116.0}
    labelcoords {287.0 97.0}
    services {zebra IPForward UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('boot.sh', )
	cmdup=('chmod +x boot.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:boot.sh
	custom-command boot.sh
	config {
	killall zebra 2>>/dev/null
	
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	
	/usr/lib/quagga/zebra -u root -g root -d -f /usr/local/etc/quagga/Quagga.conf
	
	}
    }
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    interface-peer {eth0 n1}
}

link l1 {
    nodes {n2 n1}
    bandwidth 0
}

annotation a1 {
    iconcoords {146.0 44.0 434.0 360.0}
    type rectangle
    label {LAN}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #19ffff
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}

