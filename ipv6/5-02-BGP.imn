node n1 {
    type router
    model router
    network-config {
	hostname n1Router
	!
	interface eth2
	 ipv6 address 2001:db8:1000:1::1/64
	!
	interface eth1
	 ipv6 address 2001:db8:1000:3::1/64
	!
	interface eth0
	 ipv6 address 2001:db8:1000:2::1/64
	!
    }
    canvas c1
    iconcoords {456.0 166.0}
    labelcoords {511.0 172.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n3}
    interface-peer {eth2 n8}
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ipv6 address 2001:db8:1000:2::1/64
	!
	interface eth1
	  ipv6 address 2001:db8:1000:3::1/64
	!
	interface eth2
	  ipv6 address 2001:db8:1000:1::1/64
	!
	!
	router bgp 64501
	  bgp router-id 1.1.1.1
	  neighbor 2001:db8:1000:2::2 remote-as 64502
	  neighbor 2001:db8:1000:2::2 description eBGP com R02
	  neighbor 2001:db8:1000:3::2 remote-as 64503
	  neighbor 2001:db8:1000:3::2 description eBGP com R03
	!
	!
	 address-family ipv6
	 neighbor 2001:db8:1000:2::2 activate
	 neighbor 2001:db8:1000:3::2 activate
	 network 2001:db8:1000::/48
	 exit-address-family
	!
	ipv6 route 2001:db8:1000::/48 Null0
	!
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	('/usr/local/etc/quagga', '/var/run/quagga', )
	('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', )
	35
	('sh quaggaboot.sh zebra', )
	('killall zebra', )
	('pidof zebra', )
	
	}
    }
    services {zebra BGP vtysh IPForward}
}

node n2 {
    type router
    model router
    network-config {
	hostname n2Router
	!
	interface eth2
	 ipv6 address 2001:db8:2000:2::1/64
	!
	interface eth1
	 ipv6 address 2001:db8:2000:1::1/64
	!
	interface eth0
	 ipv6 address 2001:db8:1000:2::2/64
	!
    }
    canvas c1
    iconcoords {312.0 303.0}
    labelcoords {258.0 310.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n4}
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ipv6 address 2001:db8:1000:2::2/64
	!
	interface eth1
	  ipv6 address 2001:db8:2000:1::1/64
	!
	interface eth2
	  ipv6 address 2001:db8:2000:2::1/64
	!
	!
	router bgp 64502
	 bgp router-id 2.2.2.2
	 neighbor 2001:db8:1000:2::1 remote-as 64501
	 neighbor 2001:db8:1000:2::2 description eBGP com R01
	 neighbor 2001:db8:2000:2::2 remote-as 64503
	 neighbor 2001:db8:2000:2::2 description eBGP com R03
	 neighbor 2001:db8:2000:1::2 remote-as 64504
	 neighbor 2001:db8:2000:1::2 description eBGP com R04
	
	!
	 address-family ipv6
	 neighbor 2001:db8:1000:2::1 activate
	 neighbor 2001:db8:2000:2::2 activate
	 neighbor 2001:db8:2000:1::2 activate
	 network 2001:db8:2000::/48
	 exit-address-family
	!
	ipv6 route 2001:db8:2000::/48 Null0
	!
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	('/usr/local/etc/quagga', '/var/run/quagga', )
	('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', )
	35
	('sh quaggaboot.sh zebra', )
	('killall zebra', )
	('pidof zebra', )
	
	}
    }
    services {zebra BGP vtysh IPForward}
    interface-peer {eth2 n3}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3Router
	!
	interface eth1
	 ipv6 address 2001:db8:3000:1::1/64
	!
	interface eth2
	 ipv6 address 2001:db8:2000:2::2/64
	!
	interface eth0
	 ipv6 address 2001:db8:1000:3::2/64
	!
    }
    canvas c1
    iconcoords {601.0 302.0}
    labelcoords {659.0 307.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ipv6 address 2001:db8:1000:3::2/64
	!
	interface eth1
	  ipv6 address 2001:db8:3000:1::1/64
	!
	interface eth2
	  ipv6 address 2001:db8:2000:2::2/64
	!
	router bgp 64503
	 bgp router-id 3.3.3.3
	 neighbor 2001:db8:1000:3::1 remote-as 64501
	 neighbor 2001:db8:1000:3::1 description eBGP com R01
	 neighbor 2001:db8:2000:2::1 remote-as 64502
	 neighbor 2001:db8:2000:2::1 description eBGP com R02
	 neighbor 2001:db8:3000:1::2 remote-as 64504
	 neighbor 2001:db8:3000:1::2 description eBGP com R05
	!
	 address-family ipv6
	 neighbor 2001:db8:1000:3::1 activate
	 neighbor 2001:db8:2000:2::1 activate
	 neighbor 2001:db8:3000:1::2 activate
	 network 2001:db8:3000::/48
	 exit-address-family
	!
	ipv6 route 2001:db8:3000::/48 Null0
	!
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	('/usr/local/etc/quagga', '/var/run/quagga', )
	('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', )
	35
	('sh quaggaboot.sh zebra', )
	('killall zebra', )
	('pidof zebra', )
	
	}
    }
    services {zebra BGP vtysh IPForward}
    interface-peer {eth2 n2}
    interface-peer {eth1 n5}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4Router
	!
	interface eth0
	 ipv6 address 2001:db8:4000:FFFF::1/64
	!
	interface eth2
	 ipv6 address 2001:db8:4000:1::1/64
	!
	interface eth1
	 ipv6 address 2001:db8:2000:1::2/64
	!
    }
    canvas c1
    iconcoords {311.0 402.0}
    labelcoords {256.0 409.0}
    interface-peer {eth1 n2}
    interface-peer {eth2 n6}
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ipv6 address 2001:db8:4000:FFFF::1/64
	!
	interface eth1
	  ipv6 address 2001:db8:2000:1::2/64
	!
	interface eth2
	  ipv6 address 2001:db8:4000:1::1/64
	!
	ipv6 route 2001:db8:4000:8000::/64 2001:db8:4000:FFFF::2
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	('/usr/local/etc/quagga', '/var/run/quagga', )
	('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', )
	35
	('sh quaggaboot.sh zebra', )
	('killall zebra', )
	('pidof zebra', )
	
	}
    }
    services {zebra BGP vtysh IPForward}
    interface-peer {eth0 n5}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8Host
	!
	interface eth0
	 ipv6 address 2001:db8:1000:1::20/64
	!
    }
    canvas c1
    iconcoords {293.0 125.0}
    labelcoords {256.0 122.0}
    interface-peer {eth0 n1}
}

node n6 {
    type router
    model PC
    network-config {
	hostname n6Host
	!
	interface eth0
	 ipv6 address 2001:db8:4000:1::20/64
	!
    }
    canvas c1
    iconcoords {310.0 495.0}
    labelcoords {312.0 530.0}
    interface-peer {eth0 n4}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5Router
	!
	interface eth2
	 ipv6 address 2001:db8:4000:8000::1/64
	!
	interface eth1
	 ipv6 address 2001:db8:3000:1::2/64
	!
	interface eth0
	 ipv6 address 2001:db8:4000:FFFF::2/64
	!
    }
    canvas c1
    iconcoords {602.0 403.0}
    labelcoords {658.0 412.0}
    interface-peer {eth0 n4}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ipv6 address 2001:db8:4000:FFFF::2/64
	!
	interface eth1
	  ipv6 address 2001:db8:3000:1::2/64
	!
	ipv6 route 2001:db8:4000:1::/64 2001:db8:4000:FFFF::1
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	('/usr/local/etc/quagga', '/var/run/quagga', )
	('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', )
	35
	('sh quaggaboot.sh zebra', )
	('killall zebra', )
	('pidof zebra', )
	
	}
    }
    services {zebra BGP vtysh IPForward}
    interface-peer {eth2 n7}
}

node n7 {
    type router
    model PC
    network-config {
	hostname n7Host
	!
	interface eth0
	 ipv6 address 2001:db8:4000:8000::20/64
	!
    }
    canvas c1
    iconcoords {603.0 499.0}
    labelcoords {603.0 531.0}
    interface-peer {eth0 n5}
}

link l1 {
    nodes {n2 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l4 {
    nodes {n4 n2}
    bandwidth 0
}

link l5 {
    nodes {n4 n6}
    bandwidth 0
}

link l6 {
    nodes {n1 n8}
    bandwidth 0
}

link l7 {
    nodes {n2 n3}
    bandwidth 0
}

link l3 {
    nodes {n4 n5}
    bandwidth 0
}

link l8 {
    nodes {n3 n5}
    bandwidth 0
}

link l9 {
    nodes {n5 n7}
    bandwidth 0
}

annotation a1 {
    iconcoords {791.0 349.0 791.0 349.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fcff06
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {220.0 215.0 452.0 351.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c0ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {459.0 215.0 692.0 351.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c0ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {221.0 104.0 692.0 212.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c0ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a5 {
    iconcoords {380.0 487.0}
    type text
    label {AS64504}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a6 {
    iconcoords {380.0 503.0}
    type text
    label {2001:DB8:4000::/48}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a7 {
    type text
    iconcoords {600.0 511.0}
    label {}
    canvas c1
}

annotation a8 {
    iconcoords {244.0 235.0}
    type text
    label {AS64502}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a9 {
    iconcoords {243.0 252.0}
    type text
    label {2001:DB8:2000::/48}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a10 {
    iconcoords {535.0 128.0}
    type text
    label {AS64501}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a11 {
    iconcoords {536.0 142.0}
    type text
    label {2001:DB8:1000::/48}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a12 {
    iconcoords {554.0 233.0}
    type text
    label {AS64503}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a13 {
    iconcoords {553.0 249.0}
    type text
    label {2001:DB8:3000::/48}
    labelcolor black
    fontfamily {Arial}
    fontsize {10}
    effects {bold}
    canvas c1
}

annotation a14 {
    type text
    iconcoords {580.0 238.0}
    label {}
    canvas c1
}

annotation a15 {
    iconcoords {209.0 352.0 697.0 529.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #11d046
    width 0
    border black
    rad 25
    canvas c1
}

annotation a16 {
    iconcoords {363 474 512 515}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffffff
    width 0
    border black
    rad 10
    canvas c1
}

annotation a17 {
    iconcoords {235.0 322.0 235.0 322.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffffff
    width 0
    border black
    rad 17
    canvas c1
}

annotation a18 {
    iconcoords {253.0 260.0 253.0 260.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffffff
    width 0
    border black
    rad 0
    canvas c1
}

annotation a19 {
    iconcoords {238.0 224.0 366.0 263.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffffff
    width 0
    border black
    rad 10
    canvas c1
}

annotation a20 {
    iconcoords {549.0 220.0 677.0 260.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffffff
    width 0
    border black
    rad 10
    canvas c1
}

annotation a21 {
    iconcoords {527.0 117.0 667.0 151.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ffffff
    width 0
    border black
    rad 10
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses no
    ipv6_addresses yes
    node_labels yes
    link_labels no
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}

