node n1 {
    type router
    model PC
    network-config {
	hostname n1Client
	!
	interface eth0
	 ip address 192.0.2.2/26
	!
    }
    canvas c1
    iconcoords {121.0 360.0}
    labelcoords {121.0 396.0}
    interface-peer {eth0 n2}
    services {DefaultRoute}
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 192.0.2.1
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh', )
	80
	('sh defaultroute.sh', )
	
	
	
	}
    }
}

node n2 {
    type router
    model router
    network-config {
	hostname n2CPE
	!
	interface eth1
	 ip address 203.0.113.130/27
	!
	interface eth0
	 ip address 192.0.2.1/26
	!
    }
    canvas c1
    iconcoords {121.0 267.0}
    labelcoords {96.0 243.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 203.0.113.129
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh', )
	80
	('sh defaultroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:zebra:quaggaboot.sh
	custom-command quaggaboot.sh
	config {
	#!/bin/sh
	# auto-generated by zebra service (quagga.py)
	QUAGGA_CONF=/usr/local/etc/quagga/Quagga.conf
	QUAGGA_SBIN_SEARCH="/usr/local/sbin /usr/sbin /usr/lib/quagga"
	QUAGGA_BIN_SEARCH="/usr/local/bin /usr/bin /usr/lib/quagga"
	QUAGGA_STATE_DIR=/var/run/quagga
	QUAGGA_USER=root
	QUAGGA_GROUP=root
	
	searchforprog()
	{
	    prog=$1
	    searchpath=$@
	    ret=
	    for p in $searchpath; do
	        if [ -x $p/$prog ]; then
	            ret=$p
	            break
	        fi
	    done
	    echo $ret
	}
	
	confcheck()
	{
	    CONF_DIR=`dirname $QUAGGA_CONF`
	    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
	    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
	        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
	    fi
	}
	
	
	bootdaemon()
	{
	    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
	    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
	}
	
	bootvtysh()
	{
	    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
	    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
	        echo "ERROR: Quagga's '$1' daemon not found in search path:"
	        echo "  $QUAGGA_SBIN_SEARCH"
	        return 1
	    fi
	
	    vtyfiles="zebra.vty"
	    for r in rip ripng ospf6 ospf bgp; do
	        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
	            vtyfiles="$vtyfiles ${r}d.vty"
	        fi
	    done
	    
	    # wait for Quagga daemon vty files to appear before invoking vtysh
	    for f in $vtyfiles; do
	        count=1
	        until [ -e $QUAGGA_STATE_DIR/$f ]; do
	            if [ $count -eq 10 ]; then
	                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
	                return 1
	            fi
	            sleep 0.1
	            count=$(($count + 1))
	        done
	    done 
	
	    $QUAGGA_BIN_DIR/vtysh -b
	}
	
	confcheck
	if [ "x$1" = "x" ]; then
	    echo "ERROR: missing the name of the Quagga daemon to boot"
	    exit 1
	elif [ "$1" = "vtysh" ]; then
	    bootvtysh $1
	else
	    bootdaemon $1
	fi
	
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  no ipv6 nd suppress-ra
	  ipv6 nd ra-interval 30
	  ipv6 nd prefix 2001:db8:cab0:8200::/64
	!
	
	}
    }
    services {vtysh IPForward DefaultRoute}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3Router
	!
	interface eth0
	 ip address 203.0.113.129/27
	!
	interface eth1
	 ip address 203.0.113.2/25
	!
    }
    canvas c1
    iconcoords {315.0 163.0}
    labelcoords {278.0 166.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n4}
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	
	('ipforward.sh', )
	5
	('sh ipforward.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	
	('staticroute.sh', )
	80
	('sh staticroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	/sbin/ip route add 198.51.100.0/24 via 203.0.113.1
	/sbin/ip route add 192.0.2.0/26 via 203.0.113.130
	/sbin/ip route add 192.0.2.128/26 via 203.0.113.194
	/sbin/ip route add 192.0.2.192/26 via 203.0.113.226
	
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=0
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth1.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth1.send_redirects=0
	/sbin/sysctl -w net.ipv4.conf.eth1.rp_filter=0
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.lo.disable_ipv6=1
	
	}
    }
    services {vtysh IPForward StaticRoute}
}

node n4 {
    type router
    model router
    network-config {
	hostname n4Relay
	!
	interface eth1
	 ip address 198.51.100.1/24
	 ipv6 address 2012:2::29/64
	!
	interface eth0
	 ip address 203.0.113.1/25
	!
    }
    canvas c1
    iconcoords {315.0 71.0}
    labelcoords {285.0 96.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n5}
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	ip route add 192.0.2.0/24 via 203.0.113.2
	ip route add 203.0.113.128/25 via 203.0.113.2
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	
	('staticroute.sh', )
	80
	('sh staticroute.sh', )
	
	
	
	}
    }
    services {vtysh IPForward StaticRoute}
}

node n5 {
    type router
    model PC
    network-config {
	hostname n5Host
	!
	interface eth0
	 ip address 198.51.100.2/24
	 ipv6 address 2012:2::6:12/64
	!
    }
    canvas c1
    iconcoords {602.0 72.0}
    labelcoords {602.0 104.0}
    interface-peer {eth0 n4}
    services {DefaultRoute}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	
	('defaultroute.sh', )
	80
	('sh defaultroute.sh', )
	
	
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 198.51.100.1
	ip route add default via 2012:2::29
	
	}
    }
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n4}
    bandwidth 0
}

link l4 {
    nodes {n4 n5}
    bandwidth 0
}

annotation a1 {
    iconcoords {265.0 24.0 360.0 217.0}
    type rectangle
    label {ISP}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #11d046
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {457.0 22.0 648.0 145.0}
    type rectangle
    label {Dual Stack Internet}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {73.0 218.0 169.0 314.0}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #fba030
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}
